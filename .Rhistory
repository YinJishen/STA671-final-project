climate.lag <- rbind(data[1, 12:17], data[1:(nrow(data)-1), 12:17])
data <- cbind(data, climate.lag)
lag <- data[c(6, 19:28)] %>% na.omit()
View(lag)
lag_gather <- lag %>%
gather(key = "varname", value = "value", lag1, lag2, lag3, lag4)
ggplot(data = lag_gather) +
geom_point(aes(x = PM2.5, y = value), size = 1) +
facet_wrap(~ varname) +
theme_classic() +
labs(x = "PM2.5(目前时刻)", y = "PM2.5(时移)") +
theme(axis.title = element_text(size = 15),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12))
cor(lag$PM2.5, lag$lag1)
cor(lag$PM2.5, lag$lag2)
cor(lag$PM2.5, lag$lag3)
cor(lag$PM2.5, lag$lag4)
corr_lag <- function(x){
lag <- c(rep(NA, x), data[1:(dim(data)[1]-x),]$PM2.5)
tmp <- data.frame(now = data$PM2.5,
lag = lag) %>% na.omit()
return(cor(tmp$lag, tmp$now))
}
ggplot(data = data.frame(num = 1:10, corr = sapply(1:10, corr_lag))) +
geom_line(aes(x = num, y = corr), size = 1) +
geom_point(aes(x = num, y = corr), size = 2) +
labs(x = "时移长度（小时）", y = "相关系数") +
scale_x_continuous(breaks = 1:10, labels = 1:10) +
theme_classic() +
theme(axis.title = element_text(size = 15), axis.text = element_text(size = 12))
climate.gather <- lag[c(1, 6:11)] %>%
gather(key = "varname", value = "value", -PM2.5)
climate.gather.continuous <- climate.gather %>%
filter(varname != "north")
climate.gather.discrete <- climate.gather %>%
filter(varname == "north")
labels <- c(DEWP = "最低气温", PRES = "气压", RAIN = "降雨量",
TEMP = "最高气温", wd = "风向", WSPM = "风速")
ggplot(data = climate.gather) +
geom_point(aes(x = value, y = PM2.5) , data = climate.gather.continuous, size = 0.7) +
geom_boxplot(aes(x = value, y = PM2.5) , data = climate.gather.discrete) +
facet_wrap(~ varname, scales = "free", labeller = labeller(varname = labels)) +
labs(x = "气候数据", y = "PM2.5") +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text = element_blank(),
strip.text = element_text(size = 10))
climate.gather <- lag[c(1, 6:11)] %>%
gather(key = "varname", value = "value", -PM2.5)
climate.gather.continuous <- climate.gather %>%
filter(varname != "north")
climate.gather.discrete <- climate.gather %>%
filter(varname == "north")
labels <- c(DEWP = "最低气温", PRES = "气压", RAIN = "降雨量",
TEMP = "最高气温", north = "风向", WSPM = "风速")
ggplot(data = climate.gather) +
geom_point(aes(x = value, y = PM2.5) , data = climate.gather.continuous, size = 0.7) +
geom_boxplot(aes(x = value, y = PM2.5) , data = climate.gather.discrete) +
facet_wrap(~ varname, scales = "free", labeller = labeller(varname = labels)) +
labs(x = "气候数据", y = "PM2.5") +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text = element_blank(),
strip.text = element_text(size = 10))
climate.gather <- lag[c(1, 6:11)] %>%
gather(key = "varname", value = "value", -PM2.5)
climate.gather.continuous <- climate.gather %>%
filter(varname != "north")
climate.gather.discrete <- climate.gather %>%
filter(varname == "north")
labels <- c(DEWP = "最低气温", PRES = "气压", RAIN = "降雨量",
TEMP = "最高气温", north = "风向（是否为北风）", WSPM = "风速")
ggplot(data = climate.gather) +
geom_point(aes(x = value, y = PM2.5) , data = climate.gather.continuous, size = 0.7) +
geom_boxplot(aes(x = value, y = PM2.5) , data = climate.gather.discrete) +
facet_wrap(~ varname, scales = "free", labeller = labeller(varname = labels)) +
labs(x = "气候数据", y = "PM2.5") +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text = element_blank(),
strip.text = element_text(size = 10))
train <- lag[1:30000, ]
test <- lag[30001:nrow(lag), ]
feb18.2017 <- data[34801:34824, ]
full.model <- lm(PM2.5 ~ ., data = train)
summary(full.model)
# confidence interval for the coefficients
round(confint(full.model), 4)
## diagnose plot
par(mfrow = c(2, 2))
plot(full.model)
### RMSE
rmse <- function(y, y_pred){
return(sqrt(mean((y-y_pred)^2)))
}
rmse(predict(full.model, train), train[["PM2.5"]])
rmse(predict(full.model, test), test[["PM2.5"]])
conf <- predict(full.model, feb18.2017, interval = "prediction")
conf <- data.frame(conf)
conf$true <- feb18.2017$PM2.5
conf$hour <- 1:24 - 0.5
ggplot(data = conf %>% gather(key = "key", value = "value", true, fit), aes(x = hour)) +
geom_point(aes(y = value, color = key), size = 2) +
geom_line(data = conf, aes(x = hour, y = fit), color = "red", size = 1) +
geom_ribbon(data = conf, aes(x = hour, ymin = lwr, ymax = upr), alpha = 0.2) +
labs(x = "时间（2017年2月18日）", y = "RM2.5") +
scale_x_continuous(limits = c(0, 27), breaks = seq(0, 24, 4), labels = seq(0, 24, 4)) +
scale_color_discrete(name = element_blank(), labels = c("预测值", "真实值")) +
theme_classic() +
theme(axis.title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.background = element_rect(colour = "black"),
legend.position=c(.93,.5))
# BIC (k = log(n))
bic <- step(full.model, k = log(nrow(train)))
summary(bic)
# diagnose plot
par(mfrow = c(2, 2))
plot(bic)
rmse(predict(bic, train), train[["PM2.5"]])
rmse(predict(bic, test), test[["PM2.5"]])
# starting from bic model
x.train <- model.matrix(PM2.5~.lag4-PRES, train)[,-1]
# starting from bic model
x.train <- model.matrix(PM2.5~.-lag4-PRES, train)[,-1]
y.train <- train$PM2.5
x.test <- model.matrix(PM2.5~.lag4-PRES, test)[,-1]
# starting from bic model
x.train <- model.matrix(PM2.5~.-lag4-PRES, train)[,-1]
y.train <- train$PM2.5
x.test <- model.matrix(PM2.5~.-lag4-PRES, test)[,-1]
y.test <- test$PM2.5
grid <- 10 ^ seq(-0.5, -1.5, length = 100)
ridge.mod <- glmnet(x.train, y.train, alpha = 0, lambda = grid)
pred <- predict.glmnet(ridge.mod, newx = x.test, s = grid)
RMSE <- apply(pred, 2, rmse, y.test)
ggplot(data = data.frame(lambda = grid, rmse = RMSE)) +
geom_line(aes(x = log(lambda), y = rmse), size = 1.5) +
geom_vline(aes(xintercept = log(grid[RMSE == min(RMSE)])), size = 1, colour = "red") +
labs(x = "岭回归惩罚系数（对数）", y = "测试集均方误差") +
theme_classic() +
theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10))
predict.glmnet(ridge.mod, newx = x.test, s = grid[RMSE == min(RMSE)], type = "coefficients")
min(RMSE)
grid[RMSE == min(RMSE)]
grid <- 10 ^ seq(-0.5, -1.5, length = 100)
lasso.mod <- glmnet(x.train, y.train, alpha = 1, lambda = grid)
pred <- predict.glmnet(lasso.mod, newx = x.test, s = grid)
RMSE <- apply(pred, 2, rmse, y.test)
ggplot(data = data.frame(lambda = grid, rmse = RMSE)) +
geom_line(aes(x = log(lambda), y = rmse), size = 1.5) +
geom_vline(aes(xintercept = log(grid[RMSE == min(RMSE)])), size = 1, colour = "red") +
labs(x = "LASSO回归惩罚系数（对数）", y = "测试集均方误差") +
theme_classic() +
theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10))
predict.glmnet(lasso.mod, newx = x.test, s = grid[RMSE == min(RMSE)], type = "coefficients")
min(RMSE)
grid[RMSE == min(RMSE)]
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(tidyverse)
library(glmnet)
library(pls)
# high correlation between lag data
vif(bic, digits = 3)
set.seed(1)
pcr.fit <- pcr(formula(bic), data = train, scale = TRUE)
RMSE <- sapply(1:7, function(x){
rmse(test$PM2.5, predict(pcr.fit, test, ncomp = x))
})
summary(pcr.fit)
# coefficients of each component
pcr.coef <- matrix(pcr.fit[["loadings"]], ncol = 7)
rownames(pcr.coef) <- colnames(x.train)
View(x.train)
# coefficients of each component
pcr.coef <- matrix(pcr.fit[["loadings"]], ncol = 8)
rownames(pcr.coef) <- colnames(x.train)
colnames(pcr.coef) <- paste(1:8, "comp")
round(pcr.coef, 4)
pcr.fit$coefficients[,1,]/sqrt(diag(var(x.train)))
ggplot(data = data.frame(n_component = 1:7, rmse = RMSE), aes(x = n_component, y = rmse)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_classic() +
labs(x = "主成分数量", y = "测试集均方误差") +
scale_x_continuous(breaks = 1:7, labels = 1:7) +
theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10))
set.seed(1)
pcr.fit <- pcr(formula(bic), data = train, scale = TRUE)
RMSE <- sapply(1:8, function(x){
rmse(test$PM2.5, predict(pcr.fit, test, ncomp = x))
})
summary(pcr.fit)
# coefficients of each component
pcr.coef <- matrix(pcr.fit[["loadings"]], ncol = 8)
rownames(pcr.coef) <- colnames(x.train)
colnames(pcr.coef) <- paste(1:8, "comp")
round(pcr.coef, 4)
pcr.fit$coefficients[,1,]/sqrt(diag(var(x.train)))
ggplot(data = data.frame(n_component = 1:8, rmse = RMSE), aes(x = n_component, y = rmse)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_classic() +
labs(x = "主成分数量", y = "测试集均方误差") +
scale_x_continuous(breaks = 1:8, labels = 1:8) +
theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10))
set.seed(1)
plsr.fit <- plsr(formula(bic), data = train, scale = TRUE)
RMSE <- sapply(1:8, function(x){
rmse(test$PM2.5, predict(plsr.fit, test, ncomp = x))
})
summary(plsr.fit)
# coefficient of each component
plsr.coef <- matrix(plsr.fit[["loadings"]], ncol = 8)
rownames(plsr.coef) <- colnames(x.train)
colnames(plsr.coef) <- paste(1:8, "comp")
round(plsr.coef, 4)
plsr.fit$coefficients[,1,]/sqrt(diag(var(x.train)))
ggplot(data = data.frame(n_component = 1:8, rmse = RMSE), aes(x = n_component, y = rmse)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_classic() +
labs(x = "偏最小二乘保留变量数量", y = "测试集均方误差") +
scale_x_continuous(breaks = 1:8, labels = 1:8) +
theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10))
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(tidyverse)
library(glmnet)
library(pls)
library(genridge)
data <- read.csv("wanshouxigong_20130301-20170228.csv")
wd <- function(x){
if(x %in% c("N", "NE", "NNE", "NNW", "NW", "WNW")){
return("Yes")
}
else{return("No")}
}
# PM2.5 lag data
data$lag1 <- c(NA, data[1:(dim(data)[1]-1),]$PM2.5)
data$lag2 <- c(NA, NA, data[1:(dim(data)[1]-2),]$PM2.5)
data$lag3 <- c(NA, NA, NA, data[1:(dim(data)[1]-3),]$PM2.5)
data$lag4 <- c(NA, NA, NA, NA, data[1:(dim(data)[1]-4),]$PM2.5)
data$wd <- sapply(data$wd, wd)
colnames(data)[16] <- "north"
#climate lag 1
climate.lag <- rbind(data[1, 12:17], data[1:(nrow(data)-1), 12:17])
data <- cbind(data, climate.lag)
lag <- data[c(6, 19:28)] %>% na.omit()
lag_gather <- lag %>%
gather(key = "varname", value = "value", lag1, lag2, lag3, lag4)
ggplot(data = lag_gather) +
geom_point(aes(x = PM2.5, y = value), size = 1) +
facet_wrap(~ varname) +
theme_classic() +
labs(x = "PM2.5(目前时刻)", y = "PM2.5(时移)") +
theme(axis.title = element_text(size = 15),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12))
lag_gather <- lag %>%
gather(key = "varname", value = "value", lag1, lag2, lag3, lag4)
ggplot(data = lag_gather) +
geom_point(aes(x = PM2.5, y = value), size = 1) +
facet_wrap(~ varname) +
theme_classic() +
labs(x = "PM2.5(current)", y = "PM2.5(lag)") +
theme(axis.title = element_text(size = 15),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12))
corr_lag <- function(x){
lag <- c(rep(NA, x), data[1:(dim(data)[1]-x),]$PM2.5)
tmp <- data.frame(now = data$PM2.5,
lag = lag) %>% na.omit()
return(cor(tmp$lag, tmp$now))
}
ggplot(data = data.frame(num = 1:10, corr = sapply(1:10, corr_lag))) +
geom_line(aes(x = num, y = corr), size = 1) +
geom_point(aes(x = num, y = corr), size = 2) +
labs(x = "Lag length (hour)", y = "correlation coefficient") +
scale_x_continuous(breaks = 1:10, labels = 1:10) +
theme_classic() +
theme(axis.title = element_text(size = 15), axis.text = element_text(size = 12))
climate.gather <- lag[c(1, 6:11)] %>%
gather(key = "varname", value = "value", -PM2.5)
climate.gather.continuous <- climate.gather %>%
filter(varname != "north")
climate.gather.discrete <- climate.gather %>%
filter(varname == "north")
labels <- c(DEWP = "最低气温", PRES = "气压", RAIN = "降雨量",
TEMP = "最高气温", north = "风向（是否为北风）", WSPM = "风速")
ggplot(data = climate.gather) +
geom_point(aes(x = value, y = PM2.5) , data = climate.gather.continuous, size = 0.7) +
geom_boxplot(aes(x = value, y = PM2.5) , data = climate.gather.discrete) +
facet_wrap(~ varname, scales = "free", labeller = labeller(varname = labels)) +
labs(x = "气候数据", y = "PM2.5") +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text = element_blank(),
strip.text = element_text(size = 10))
climate.gather <- lag[c(1, 6:11)] %>%
gather(key = "varname", value = "value", -PM2.5)
climate.gather.continuous <- climate.gather %>%
filter(varname != "north")
climate.gather.discrete <- climate.gather %>%
filter(varname == "north")
labels <- c(DEWP = "Low Temp", PRES = "Pressure", RAIN = "Rainfall",
TEMP = "High Temp", north = "WD (north or not)", WSPM = "Wind Speed")
ggplot(data = climate.gather) +
geom_point(aes(x = value, y = PM2.5) , data = climate.gather.continuous, size = 0.7) +
geom_boxplot(aes(x = value, y = PM2.5) , data = climate.gather.discrete) +
facet_wrap(~ varname, scales = "free", labeller = labeller(varname = labels)) +
labs(x = "Climate Date", y = "PM2.5") +
theme_classic() +
theme(axis.title = element_text(size = 12),
axis.text = element_blank(),
strip.text = element_text(size = 10))
train <- lag[1:30000, ]
test <- lag[30001:nrow(lag), ]
feb18.2017 <- data[34801:34824, ]
full.model <- lm(PM2.5 ~ ., data = train)
summary(full.model)
# confidence interval for the coefficients
round(confint(full.model), 4)
## diagnose plot
par(mfrow = c(2, 2))
plot(full.model)
### RMSE
rmse <- function(y, y_pred){
return(sqrt(mean((y-y_pred)^2)))
}
rmse(predict(full.model, train), train[["PM2.5"]])
rmse(predict(full.model, test), test[["PM2.5"]])
conf <- predict(full.model, feb18.2017, interval = "prediction")
conf <- data.frame(conf)
conf$true <- feb18.2017$PM2.5
conf$hour <- 1:24 - 0.5
ggplot(data = conf %>% gather(key = "key", value = "value", true, fit), aes(x = hour)) +
geom_point(aes(y = value, color = key), size = 2) +
geom_line(data = conf, aes(x = hour, y = fit), color = "red", size = 1) +
geom_ribbon(data = conf, aes(x = hour, ymin = lwr, ymax = upr), alpha = 0.2) +
labs(x = "Time (2017.2.18)", y = "RM2.5") +
scale_x_continuous(limits = c(0, 27), breaks = seq(0, 24, 4), labels = seq(0, 24, 4)) +
scale_color_discrete(name = element_blank(), labels = c("Prediction", "True value")) +
theme_classic() +
theme(axis.title = element_text(size = 15),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12),
legend.background = element_rect(colour = "black"),
legend.position=c(.93,.5))
# BIC (k = log(n))
bic <- step(full.model, k = log(nrow(train)))
summary(bic)
# diagnose plot
par(mfrow = c(2, 2))
plot(bic)
rmse(predict(bic, train), train[["PM2.5"]])
rmse(predict(bic, test), test[["PM2.5"]])
# starting from bic model
x.train <- model.matrix(PM2.5~.-lag4-PRES, train)[,-1]
y.train <- train$PM2.5
x.test <- model.matrix(PM2.5~.-lag4-PRES, test)[,-1]
y.test <- test$PM2.5
grid <- 10 ^ seq(-0.5, -1.5, length = 100)
ridge.mod <- glmnet(x.train, y.train, alpha = 0, lambda = grid)
pred <- predict.glmnet(ridge.mod, newx = x.test, s = grid)
RMSE <- apply(pred, 2, rmse, y.test)
ggplot(data = data.frame(lambda = grid, rmse = RMSE)) +
geom_line(aes(x = log(lambda), y = rmse), size = 1.5) +
geom_vline(aes(xintercept = log(grid[RMSE == min(RMSE)])), size = 1, colour = "red") +
labs(x = "log-lambda", y = "RMSE for test data") +
theme_classic() +
theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10))
predict.glmnet(ridge.mod, newx = x.test, s = grid[RMSE == min(RMSE)], type = "coefficients")
min(RMSE)
grid[RMSE == min(RMSE)]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
ggplot(data = data1) +
geom_bar(aes(x = year, group = level, fill = level), position = "fill") +
facet_wrap(~season, nrow = 1) +
scale_fill_manual(breaks = c(1, 4, 2, 5, 3, 6),
values = c("#3D0000", "#910000", "red", "orange", "yellow", "green"),
name = element_blank(),
labels = c(expression(PM[2.5]*"<35"*mu*"g/"*m^3),
expression("115"*mu*"g/"*m^3*"<"*PM[2.5]*"<150"*mu*"g/"*m^3),
expression("35"*mu*"g/"*m^3*"<"*PM[2.5]*"<75"*mu*"g/"*m^3),
expression("150"*mu*"g/"*m^3*"<"*PM[2.5]*"<250"*mu*"g/"*m^3),
expression("75"*mu*"g/"*m^3*"<"*PM[2.5]*"<115"*mu*"g/"*m^3),
expression(PM[2.5]*">250"*mu*"g/"*m^3))) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), labels = seq(0.2, 1, 0.2)) +
labs(y = "Percentage") +
theme_classic() +
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 1, size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = 8),
axis.text.y = element_text(size = 8),
legend.text = element_text(hjust = 0, size = 10),
strip.background = element_blank(),
strip.text = element_text(size = 10))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data1 <- read.csv("wanshouxigong_20130301-20170228.csv") %>%
select(year, month, day, PM2.5, wd) %>%
filter(year < 2017) %>%
na.omit()
season <- function(x){
if(x <= 5 & x >= 3){return("春")}
else if(x <= 8 & x >= 6){return("夏")}
else if(x <= 11 & x >= 9){return("秋")}
else{return("冬")}
}
level <- function(x){
if(x < 35){return(1)}
else if(x < 75){return(2)}
else if(x < 115){return(3)}
else if(x < 150){return(4)}
else if(x < 250){return(5)}
else{return(6)}
}
data1$season = factor(sapply(data1$month, season), levels = c("春", "夏", "秋", "冬"))
data1$level = factor(sapply(data1$PM2.5, level), levels = c(6, 5, 4, 3, 2, 1))
ggplot(data = data1) +
geom_bar(aes(x = year, group = level, fill = level), position = "fill") +
facet_wrap(~season, nrow = 1) +
scale_fill_manual(breaks = c(1, 4, 2, 5, 3, 6),
values = c("#3D0000", "#910000", "red", "orange", "yellow", "green"),
name = element_blank(),
labels = c(expression(PM[2.5]*"<35"*mu*"g/"*m^3),
expression("115"*mu*"g/"*m^3*"<"*PM[2.5]*"<150"*mu*"g/"*m^3),
expression("35"*mu*"g/"*m^3*"<"*PM[2.5]*"<75"*mu*"g/"*m^3),
expression("150"*mu*"g/"*m^3*"<"*PM[2.5]*"<250"*mu*"g/"*m^3),
expression("75"*mu*"g/"*m^3*"<"*PM[2.5]*"<115"*mu*"g/"*m^3),
expression(PM[2.5]*">250"*mu*"g/"*m^3))) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), labels = seq(0.2, 1, 0.2)) +
labs(y = "Percentage") +
theme_classic() +
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 1, size = 8),
axis.text.x = element_text(angle = 90, vjust = 0.5, size = 8),
axis.text.y = element_text(size = 8),
legend.text = element_text(hjust = 0, size = 10),
strip.background = element_blank(),
strip.text = element_text(size = 10))
ggplot(data = data1) +
geom_bar(aes(x = wd, group = level, fill = level), position = "fill") +
scale_fill_manual(breaks = c(1, 4, 2, 5, 3, 6),
values = c("#3D0000", "#910000", "red", "orange", "yellow", "green"),
name = element_blank(),
labels = c(expression(PM[2.5]*"<35"*mu*"g/"*m^3),
expression("115"*mu*"g/"*m^3*"<"*PM[2.5]*"<150"*mu*"g/"*m^3),
expression("35"*mu*"g/"*m^3*"<"*PM[2.5]*"<75"*mu*"g/"*m^3),
expression("150"*mu*"g/"*m^3*"<"*PM[2.5]*"<250"*mu*"g/"*m^3),
expression("75"*mu*"g/"*m^3*"<"*PM[2.5]*"<115"*mu*"g/"*m^3),
expression(PM[2.5]*">250"*mu*"g/"*m^3))) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), labels = seq(0.2, 1, 0.2)) +
labs(y = "Percentage") +
theme_classic() +
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 1, size = 8),
axis.text.x = element_text(angle = 30, vjust = 0.5, size = 8),
axis.text.y = element_text(size = 8),
legend.text = element_text(hjust = 0, size = 10),
strip.background = element_blank(),
strip.text = element_text(size = 10))
data1 <- read.csv("wanshouxigong_20130301-20170228.csv") %>%
select(year, month, day, PM2.5, wd) %>%
filter(year < 2017) %>%
na.omit()
season <- function(x){
if(x <= 5 & x >= 3){return("春")}
else if(x <= 8 & x >= 6){return("夏")}
else if(x <= 11 & x >= 9){return("秋")}
else{return("冬")}
}
level <- function(x){
if(x < 35){return(1)}
else if(x < 75){return(2)}
else if(x < 115){return(3)}
else if(x < 150){return(4)}
else if(x < 250){return(5)}
else{return(6)}
}
data1$season = factor(sapply(data1$month, season), levels = c("春", "夏", "秋", "冬"))
data1$level = factor(sapply(data1$PM2.5, level), levels = c(6, 5, 4, 3, 2, 1))
ggplot(data = data1) +
geom_bar(aes(x = wd, group = level, fill = level), position = "fill") +
scale_fill_manual(breaks = c(1, 4, 2, 5, 3, 6),
values = c("#3D0000", "#910000", "red", "orange", "yellow", "green"),
name = element_blank(),
labels = c(expression(PM[2.5]*"<35"*mu*"g/"*m^3),
expression("115"*mu*"g/"*m^3*"<"*PM[2.5]*"<150"*mu*"g/"*m^3),
expression("35"*mu*"g/"*m^3*"<"*PM[2.5]*"<75"*mu*"g/"*m^3),
expression("150"*mu*"g/"*m^3*"<"*PM[2.5]*"<250"*mu*"g/"*m^3),
expression("75"*mu*"g/"*m^3*"<"*PM[2.5]*"<115"*mu*"g/"*m^3),
expression(PM[2.5]*">250"*mu*"g/"*m^3))) +
scale_y_continuous(breaks = seq(0.2, 1, 0.2), labels = seq(0.2, 1, 0.2)) +
labs(y = "Percentage") +
theme_classic() +
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 1, size = 8),
axis.text.x = element_text(angle = 30, vjust = 0.5, size = 8),
axis.text.y = element_text(size = 8),
legend.text = element_text(hjust = 0, size = 10),
strip.background = element_blank(),
strip.text = element_text(size = 10))
